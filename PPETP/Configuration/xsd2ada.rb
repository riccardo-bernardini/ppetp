#!/usr/bin/env ruby

class Tabulator
  #
  # Handy class useful to keep indentation in automatically
  # generated code.
  #
  def initialize (step=3)
    @skip = 0
    @step = step
  end

  def open
    @skip += @step
  end

  def close
     @skip -= @step if (@skip >= @step)
  end

  def t
    ' ' * @skip
  end
end

def normalize(str)
  # Prepare str to be included in an Ada string, i.e., remove 
  # EOL from str and map each double quote '"' in two double
  # quotes.
  return str.chomp.gsub('"', '""')
end
input = ARGV.shift
output = ARGV.shift

#
# Some syntax check
#
if (input.nil? or output.nil?) 
  puts "Usage : rnc2ada.rb input output"
  exit 1
end

unless output =~  /^(.*)\.adb$/
  puts "output filename (#{output}) should end in .adb"
  exit 1
end

package_name = $1
tab = Tabulator.new
to_be_used = [ "Schema.Schema_Readers", 
  "Schema.Validators", 
  "Input_Sources.Strings",
  "Schema.Schema_Grammar",
  "Unicode.Ces.Utf8"];

File.open(output, 'w') do |out_stream|
  out_stream.puts "-- WARNING: this file was automatically generated"
  out_stream.puts "-- from #{input}.  Do not edit this file."
  out_stream.puts "-- (Well, ok, you can edit it, but you will loose"
  out_stream.puts "-- your changes the next time the file is rigenerated)"
  out_stream.puts

  to_be_used.each do |pkg|
    out_stream.puts "with #{pkg};  use #{pkg};"
  end

  out_stream.puts "";
  out_stream.puts "pragma Elaborate_All(Schema.Schema_Readers);"
  out_stream.puts "";
  out_stream.puts "package body #{package_name} is" ; tab.open
  out_stream.puts "#{tab.t}CR     : constant Character := Character'Val(13);"
  out_stream.puts "#{tab.t}LF     : constant Character := Character'Val(10);"
  out_stream.puts "#{tab.t}Schema : Schema_Reader;"
  out_stream.puts "#{tab.t}Read   : String_Input;"
  out_stream.puts "#{tab.t}Local_Grammar : XML_Grammar;"
  out_stream.puts
  out_stream.print "#{tab.t}Grammar_Spec : String := " ; tab.open
  head = ' ';

  File.open(input) do |in_stream|
    in_stream.each do |line|
      out_stream.puts "";
      out_stream.print "#{tab.t}#{head} \"#{normalize(line)}\" & CR & LF";
      head = '&';
    end
  end

  out_stream.puts ";" 
  tab.close;

  out_stream.puts "#{tab.t}function Grammar return XML_Grammar is";
  out_stream.puts "#{tab.t}begin" ; 
  tab.open;
  out_stream.puts "#{tab.t}return Local_Grammar;"
  tab.close;
  out_stream.puts "#{tab.t}end Grammar;"

  out_stream.puts
  tab.close;
  out_stream.puts "begin" ; tab.open;
  out_stream.puts "#{tab.t}Open(str => Grammar_Spec, encoding => Utf8_encoding, input => Read);"
  out_stream.puts "#{tab.t}Parse(Schema, Read);"
  out_stream.puts "#{tab.t}Close(Read);"
  out_stream.puts "#{tab.t}Local_Grammar := Get_Created_Grammar(Schema);"
  out_stream.puts "end #{package_name};" ; tab.close;
end
